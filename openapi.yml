openapi: 3.0.3
info:
  title: Pokétroc
  description: >-
    Application qui permet aux utilisateurs de lister leurs cartes pokémon, de
    les échanger ainsi que de chercher des cartes qu’ils aimeraient acquérir.
  version: 1.1.0
  contact:
    url: https://github.com/nicolaswunderle/poketroc
servers:
  - url: https://poketroc.onrender.com/api
tags:
  - name: dresseur
    description: "Données dresseur"
  - name: carte
    description: "Données carte"
  - name: échange
    description: "Echange entre dresseur"
  - name: message
    description: "Message pour échange"
paths:
  /dresseurs:
    post:
      summary: Créer un dresseur
      tags:
        - dresseur
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DresseurData"
      responses:
        "201":
          description: Inscription réussie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dresseur"
        "422":
          $ref: "#/components/responses/DresseurValidationErreur"
  /dresseurs?localisation={coordonnéesGeographique}&page={number}&pageSize={number}:
    get:
      summary: Afficher les dresseurs par ordre de proximité
      tags:
        - dresseur
      parameters:
        - name: coordonnéesGeographique
          in: path
          description: Coordonnées géographiques du dresseur
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Numéro de la page
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Taille de la page
          required: false
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Liste des dresseurs proches est affichée.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dresseur"
        "503":
          $ref: "#/components/responses/ErreurConnexion"
  /dresseurs/{dresseurId}:
    get:
      summary: Afficher le dresseur
      tags:
        - dresseur
      parameters:
        - name: dresseurId
          in: path
          description: Identifiant du dresseur
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Le dresseur est affiché
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DresseurDataPartiel"
        "404":
          $ref: "#/components/responses/DresseurEstPasAffiche"
    patch:
      summary: Modifier partiellement les informations du dresseur
      tags:
        - dresseur
      security:
        - BearerAuth: []
      parameters:
        - name: dresseurId
          in: path
          description: Identifiant du dresseur
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Le dresseur a été modifié
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DresseurDataPartiel"
        "404":
          $ref: "#/components/responses/ModificationDresseurErreur"
        "422":
          $ref: "#/components/responses/DresseurValidationErreurPatch"
    delete:
      summary: Supprimer le dresseur
      tags:
        - dresseur
      security:
        - BearerAuth: []
      parameters:
        - name: dresseurId
          in: path
          description: Identifiant du dresseur
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Le dresseur a été supprimé
        "404":
          $ref: "#/components/responses/DresseurIntrouvable"
  /dresseurs/connexion:
    post:
      summary: Connexion au compte dresseur
      tags:
        - dresseur
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/connexion"
      responses:
        "201":
          $ref: "#/components/responses/connexionReussie"
        "401":
          $ref: "#/components/responses/connexionEchouee"
        "422":
          $ref: "#/components/responses/connexionErreur"
    delete:
      summary: Deconnexion au compte dresseur
      tags:
        - dresseur
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Déconnexion réussie
        "404":
          $ref: "#/components/responses/deconnexionEchouee"

  /cartes:
    post:
      summary: Créer une carte
      tags:
        - carte
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CarteData"
      responses:
        "201":
          description: Création réussie.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Carte"
        "422":
          $ref: "#/components/responses/CarteValidationErreur"
  /cartes/{carteId}:
    get:
      summary: Afficher carte
      tags:
        - carte
      security:
        - BearerAuth: []
      parameters:
        - name: carteId
          in: path
          description: Identifiant de la carte
          required: true
          schema:
            type: string
      responses:
        "200":
          description: La carte a été affichée.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Carte"
        "404":
          $ref: "#/components/responses/CartePasAffichee"
    patch:
      summary: Modifier partiellement la carte
      tags:
        - carte
      security:
        - BearerAuth: []
      parameters:
        - name: carteId
          in: path
          description: Identifiant de la carte
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CarteDataPartiel"
      responses:
        "200":
          description: Modification réussie.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Carte"
        "404":
          $ref: "#/components/responses/CartePasModifiee"
    delete:
      summary: Supprimer la carte
      tags:
        - carte
      security:
        - BearerAuth: []
      parameters:
        - name: carteId
          in: path
          description: Identifiant de la carte
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/CarteSupprimee"
        "404":
          $ref: "#/components/responses/CartePasSupprimee"
  /cartes/{dresseurId}?statut={collectee, souhaitee}&page={number}&pageSize={number}:
    get:
      summary: Afficher toutes les cartes du dresseur en fonction du statut.
      tags:
        - carte
      security:
        - BearerAuth: []
      parameters:
        - name: dresseurId
          in: path
          description: Identifiant du dresseur
          required: true
          schema:
            type: string
        - name: statut
          in: query
          description: Statut des cartes (collectee, souhaitee)
          required: false
          schema:
            type: string
            enum:
              - collectee
              - souhaitee
        - name: page
          in: query
          description: Numéro de la page
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Taille de la page
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: >-
            Liste des cartes dresseurId, avec statut spécifié, affichée
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Carte"
        "404":
          $ref: "#/components/responses/ListeCartePasAffichee"

  /echanges:
    post:
      summary: Créer un échange
      tags:
        - échange
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EchangeData"
      responses:
        "201":
          description: L'échange a été crée avec succès.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Echange"
        "422":
          $ref: "#/components/responses/EchangeValidationErreur"
  /echanges/proposes?tri={nouveaute,pertinence}&page={number}&pageSize={number}:
    get:
      summary: Afficher tous les échanges proposés
      tags:
        - échange
      security:
        - BearerAuth: []
      parameters:
        - name: tri
          in: query
          description: Critère de tri des échanges (nouveaute, pertinence)
          required: false
          schema:
            type: string
            enum:
              - nouveaute
              - pertinence
        - name: page
          in: query
          description: Numéro de la pages
          required: false
          schema:
            type: integer
        - name: pageSize
          in: query
          description: Taille de la page
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: La liste des échanges proposés est affichée.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Echange"
  /echanges/{echangeId}:
    get:
      summary: Afficher un échange
      tags:
        - échange
      security:
        - BearerAuth: []
      parameters:
        - name: echangeId
          in: path
          description: Identifiant de l'échange.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: L'échange est affiché.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Echange"
        "404":
          $ref: "#/components/responses/EchangePasAffiche"
    patch:
      summary: Modifier quelques informations d'un échange
      tags:
        - échange
      security:
        - BearerAuth: []
      parameters:
        - name: echangeId
          in: path
          description: Identifiant de l'échange.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EchangeData"
      responses:
        "200":
          description: L'échange a été modifié.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Echange"
        "404":
          $ref: "#/components/responses/EchangePasModifie"
        "422":
          $ref: "#/components/responses/EchangeModificationErreur"
    delete:
      summary: Supprimer un échange
      tags:
        - échange
      security:
        - BearerAuth: []
      parameters:
        - name: echangeId
          in: path
          description: Id de l'échange
          required: true
          schema:
            type: string
      responses:
        "204":
          $ref: "#/components/responses/EchangeSupprime"
        "404":
          $ref: "#/components/responses/EchangePasSupprime"
  /echanges/{dresseurId}:
    get:
      summary: Afficher tous les échanges du dresseur
      tags:
        - échange
      security:
        - BearerAuth: []
      parameters:
        - name: dresseurId
          in: path
          description: Identifiant du dresseur
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Les échanges sont affichés.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Echange"
        "404":
          $ref: "#/components/responses/EchangesPasAffiche"
  /echanges/{dresseurId}?etat={accepte, attente, refuse}:
    get:
      summary: Afficher les échanges du dresseur en fonction de l'état
      tags:
        - échange
      security:
        - BearerAuth: []
      parameters:
        - name: dresseurId
          in: query
          description: Identifiant du dresseur
          required: true
          schema:
            type: string
        - name: état
          in: query
          description: État des échanges (accepte, attente, refuse)
          required: false
          schema:
            type: string
            enum:
              - accepte
              - attente
              - refuse
      responses:
        "200":
          description: La Liste des échanges du dresseur en fonction de l'état.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Echange"
        "404":
          $ref: "#/components/responses/EchangesPasAffiche"

  /messages:
    post:
      summary: Créer un message
      tags:
        - message
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageData"
      responses:
        "201":
          description: Message créé avec succès.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          $ref: "#/components/responses/MessageErreur"
        "422":
          $ref: "#/components/responses/DestinataireErreur"
  /messages/{messageId}:
    delete:
      summary: Supprimer un message
      tags:
        - message
      parameters:
        - name: messageId
          in: path
          description: Identifiant du message
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        "204":
          description: MessageId supprimé
          content:
            text/plain:
              schema:
                example: Le messageId 7be91a9a41bc839033eedf0k à été supprimé.
        "404":
          $ref: "#/components/responses/MessageIntrouvable"
  /messages/{echangeId}:
    get:
      summary: Affiche tous les messages d’un échange
      tags:
        - message
      parameters:
        - name: echangeId
          in: path
          description: Identifiant de l'échange
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Messages de l'échangeId affichés
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "404":
          $ref: "#/components/responses/DiscussionIntrouvable"

components:
  responses:
    ModificationDresseurErreur:
      description: Erreur modification dresseur
      content:
        text/plain:
          example: Le dresseurId 7be91a9a41bc839033eedf0k n'a pas été trouvé, modification invalide.
    DresseurValidationErreurPatch:
      description: Erreur de validation
      content:
        text/plain:
          example: Erreur de validation lors de la modification du dresseurId 7be91a9a41bc839033eedf0k.
    DresseurValidationErreur:
      description: Echec de l'inscription.
      content:
        text/plain:
          example: >-
            Dresseur validation failed: mot_de_passe: Le mot de passe du
            dresseur est obligatoire.

    connexionReussie:
      description: Connexion réussie.
      content:
        text/plain:
          example: Connexion au compte dresseurId 7be91a9a41bc839033eedf0k réussie.
    connexionErreur:
      description: Erreur de validation de connexion
      content:
        text/plain:
          example: Erreur de validation, connexion échouée.
    connexionEchouee:
      description: Mots de passe ou pseudo incorrect
      content:
        text/plain:
          example: Mots de passe ou pseudo incorrect, connexion échouée.
    deconnexionReussie:
      description: Déconnexion réussie.
      content:
        text/plain:
          example: Déconnexion réussie.
    deconnexionEchouee:
      description: Déconnexion échouée.
      content:
        text/plain:
          example: >-
            Échec de la déconnexion. Une erreur interne s'est produite. Veuillez
            contacter le support technique pour plus d'assistance.
    DresseurEstPasAffiche:
      description: Le dresseur n'a pas été affiché.
      content:
        text/plain:
          example: "Le dresseurId 7fe91a9a41bc839033eedf0f n'a pas été trouvé."
    ErreurConnexion:
      description: Erreur de connexion.
      content:
        text/plain:
          example: " Le serveur n'est pas disponible en raison d'une surcharge temporaire ou de travaux de maintenance."
    ModificationErreur:
      description: La modification n'a pas été validé
      content:
        text/plain:
          example: La modification n'a pas été effectué
    DresseurIntrouvable:
      description: Le dresseur est introuvable.
      content:
        text/plain:
          example: Le dresseurId 7be91a9a41bc839033eedf0k est introuvable.
    DestinataireErreur:
      description: Destinataire introuvable
      content:
        text/plain:
          example: Le dresseurId 7be91a9a41bc839033eedf0k  introuvable, message impossible.

    CarteValidationErreur:
      description: Erreur de validation lors de la création.
      content:
        application/json:
          example: Une erreur de validation est survenue, la carte n'a pas été créée.
    CartePasAffichee:
      description: CarteId introuvable.
      content:
        text/plain:
          example: La carteId 'aaab' introuvable, affichage impossible.
    CartePasModifiee:
      description: La carteId n'a pas été trouvée.
      content:
        text/plain:
          example: >-
            La carteId 'aaab' n'a pas été trouvée et n'a donc pas pu être
            modifiée.
    CarteSupprimee:
      description: CarteId supprimée
      content:
        text/plain:
          example: La carteId 'aaab' a été supprimée.
    CartePasSupprimee:
      description: CarteId introuvable.
      content:
        text/plain:
          example: CarteId 'aaab' introuvable, suppression impossible.
    ListeCartePasAffichee:
      description: DresseurId introuvable
      content:
        text/plain:
          example: >-
            DresseurId 7be91a9a41bc839033eedf0k introuvable, la liste des cartes avec le
            statut choisi ne peut pas être affichée.

    EchangesPasAffiche:
      description: Dresseur pas trouvé.
      content:
        text/plain:
          example: Le dresseur avec l'ID 7be91a9a41bc839033eedf0k n'a pas été trouvé.
    EchangePasSupprime:
      description: EchangeId introuvable
      content:
        text/plain:
          example: L'échangeId 7fe91a9a41bc839033eedf0f introuvable, suppression impossible.
    EchangeSupprime:
      description: L'échange a été supprimé avec succès.
      content:
        text/plain:
          example: L'échangeId 7fe91a9a41bc839033eedf0f a été supprimé avec succès.
    EchangePasModifie:
      description: EchangeId introuvable.
      content:
        text/plain:
          example: EchangeId 7fe91a9a41bc839033eedf0f introuvable, modification impossible.
    EchangeModificationErreur:
      description: Erreur validation
      content:
        text/plain:
          example: Erreur de validation, modification de l'échangeId 7fe91a9a41bc839033eedf0f impossible
    EchangeValidationErreur:
      description: L'échange n'a pas été crée car dresseur non trouvé.
      content:
        text/plain:
          example: >-
            L'échange n'a pas été créé, le dresseur avec l'ID
            7be91a9a41bc839033eedf0k n'a pas été trouvé.
    EchangePasAffiche:
      description: EchangeId introuvable
      content:
        text/plain:
          example: EchangeId 7fe91a9a41bc839033eedf0f introuvable, affichage impossible.

    MessageErreur:
      description: Le message n'a pas été créé
      content:
        text/plain:
          example: Le message n'a pas pu être créé
    MessageIntrouvable:
      description: Message introuvable
      content:
        text/plain:
          example: Le messageId 7be91a9a41bc839033eedf0k est introuvable.
    DiscussionIntrouvable:
      description: EchangeId introuvable
      content:
        text/plain:
          example: Messages de l'échangeId 04657 introuvables.

  schemas:
    connexion:
      type: object
      properties:
        pseudo:
          type: string
          maxlength: 40
          unique: true
          description: "pseudo du dresseur"
          example: Nerak
        mot_de_passe:
          type: string
          description: "mot de passe du dresseur"
          example: unMotDePasse88
      required:
        - pseudo
        - mot_de_passe
    Dresseur:
      type: object
      properties:
        id:
          type: string
          description: "identifiant du dresseur"
          example: 7be91a9a41bc839033eedf0k
        nom:
          type: string
          description: "nom du dresseur"
          maxlength: 40
          example: Bonfils
        prenom:
          type: string
          description: "prénom du dresseur"
          maxlength: 40
          example: Karen
        pseudo:
          type: string
          description: "pseudo du dresseur"
          maxlength: 40
          example: Nerak
        email:
          type: string
          description: "email du dresseur"
          example: adresse@email.ch
        age:
          type: integer
          description: "âge du dresseur"
          minimum: 1
          maximum: 200
          example: 25
        localisation:
          type: object
          properties:
            type:
              type: string
              enum: ["Point"]
              description: Type de localisation.
            coordinates:
              type: array
              items:
                type: number
              description: Coordonnées géographiques (longitude, latitude).
              example: "[ -73.856077, 40.848447 ]"
        url_image_profil:
          type: string
          description: "image du profil dresseur"
          example: >-
            https://p1.hiclipart.com/preview/553/126/513/pikachu-i-choose-you-pikachu-icon-png-icon.jpg

      required:
        - id
        - nom
        - prenom
        - pseudo
        - email
        - mot_de_passe
        - age
        - localisation
    DresseurData:
      type: object
      properties:
        nom:
          type: string
          description: "nom du dresseur"
          maxlength: 40
          example: Bonfils
        prenom:
          type: string
          description: "prénom du dresseur"
          maxlength: 40
          example: Karen
        mot_de_passe:
          type: string
          description: "mot de passe du dresseur"
          example: unMotDePasse32
        pseudo:
          type: string
          description: "pseudo du dresseur"
          unique: true
          maxlength: 40
          example: Nerak
        email:
          type: string
          description: "email du dresseur"
          example: adresse@email.ch
        age:
          type: number
          description: "âge du dresseur"
          minimum: 1
          maximum: 200
          example: 25
        localisation:
          type: object
          properties:
            type:
              type: string
              enum: ["Point"]
              description: Type de localisation.
            coordinates:
              type: array
              items:
                type: number
              description: Coordonnées géographiques (longitude, latitude).
              example: "[ -73.856077, 40.848447 ]"
        url_image_profil:
          type: string
          description: "image du prrofil dresseur"
          example: >-
            https://p1.hiclipart.com/preview/553/126/513/pikachu-i-choose-you-pikachu-icon-png-icon.jpg
      required:
        - prenom
        - nom
        - pseudo
        - email
        - age
        - localisation
    DresseurDataPartiel:
      type: object
      properties:
        nom:
          type: string
          description: "nom du dresseur"
          maxlength: 40
          example: Bonfils
        prenom:
          type: string
          description: "prénom du dresseur"
          maxlength: 40
          example: Karen
        pseudo:
          type: string
          description: "pseudo du dresseur"
          maxlength: 40
          example: Nerak
        email:
          type: string
          description: "email du dresseur"
          example: adresse@email.ch
        mot_de_passe:
          type: string
          description: "mot de passe du dresseur"
          example: unMotDePasse32
        age:
          type: number
          description: "âge du dresseur"
          minimum: 1
          maximum: 200
          example: 25
        localisation:
          type: object
          properties:
            type:
              type: string
              enum: ["Point"]
              description: Type de localisation.
            coordinates:
              type: array
              items:
                type: number
              description: Coordonnées géographiques (longitude, latitude).
              example: "[ -73.856077, 40.848447 ]"
        url_image_profil:
          type: string
          description: "image du profil dresseur"
          example: >-
            https://p1.hiclipart.com/preview/553/126/513/pikachu-i-choose-you-pikachu-icon-png-icon.jpg

    Carte:
      type: object
      properties:
        id:
          type: string
          description: L'identifiant unique de la carte
          example: 7be91a9a41bc839033eedf0k
        id_api:
          type: string
          description: L'identifiant de l'api
          example: 7xy10-117
          unique: true
        etat:
          type: string
          description: L'état unique de la carte
          enum:
            - neuve
            - excellente
            - très bonne
            - bonne
            - moyenne
            - mauvaise
          example: neuve
          unique: true
        desc_etat:
          type: string
          description: La description de l'état unique de la carte
          maxlength: 255
          example: Très bon état. Aucune éraflure
          unique: true
        statut:
          type: string
          description: Le statut de la carte
          enum:
            - collectée
            - souhaitée
          example: collectée
        type:
          type: string
          description: Le type unique de la carte
          enum:
            - normale
            - reverse
            - holo
          unique: true
        quantite:
          type: number
          description: La quantité de la carte
          minimum: 1
          maximum: 1000
          example: 7
        dresseur_id:
          type: string
          description: L'identifiant unique d'un dresseur qui possède la carte
          example: 7fe91a9a41bc839033eedf0f
        dresseur:
          type: string
          $ref: "#/components/schemas/Dresseur"
      required:
        - id
        - id_api
        - etat
        - desc_etat
        - statut
        - type
        - quantite
        - dresseur_id
    CarteData:
      type: object
      properties:
        id_api:
          type: string
          description: L'identifiant de l'api
          example: 7xy10-117
          unique: true
        etat:
          type: string
          description: L'état unique de la carte
          enum:
            - neuve
            - excellente
            - très bonne
            - bonne
            - moyenne
            - mauvaise
          example: neuve
          unique: true
        desc_etat:
          type: string
          description: La description de l'état unique de la carte
          maxlength: 255
          example: Très bon état. Aucune éraflure
          unique: true
        statut:
          type: string
          description: Le statut de la carte
          enum:
            - collectée
            - souhaitée
          example: collectée
        type:
          type: string
          description: Le type unique de la carte
          enum:
            - normale
            - reverse
            - holo
          unique: true
        quantite:
          type: number
          description: La quantité de la carte
          minimum: 1
          maximum: 1000
          example: 7
        dresseur_id:
          type: string
          description: L'identifiant unique d'un dresseur qui possède la carte
          example: 7fe91a9a41bc839033eedf0f
      required:
        - id
        - id_api
        - etat
        - desc_etat
        - statut
        - type
        - quantite
        - dresseur_id
    CarteDataPartiel:
      type: object
      properties:
        etat:
          type: string
          description: L'état unique de la carte
          enum:
            - neuve
            - excellente
            - très bonne
            - bonne
            - moyenne
            - mauvaise
          example: neuve
          unique: true
        desc_etat:
          type: string
          description: La description de l'état unique de la carte
          maxlength: 255
          example: Très bon état. Aucune éraflure
          unique: true
        statut:
          type: string
          description: Le statut de la carte
          enum:
            - collectée
            - souhaitée
          example: collectée
        type:
          type: string
          description: Le type unique de la carte
          enum:
            - normale
            - reverse
            - holo
          unique: true
        quantite:
          type: number
          description: La quantité de la carte
          minimum: 1
          maximum: 1000
          example: 7
        dresseur_id:
          type: string
          description: L'identifiant unique d'un dresseur qui possède la carte
          example: 7fe91a9a41bc839033eedf0f
    CarteEchange:
      type: object
      properties:
        echange_id:
          type: string
          description: >-
            L'identifiant de l'échange qui va concerner une ou plusieurs cartes
            est obligatoire
          example: 7fe91a9a41bc839033eedf0f
          unique: true
        echange:
          type: string
          $ref: "#/components/schemas/Echange"
        carte_id:
          type: string
          description: L'identifiant unique de la carte qui va être échangé
          example: 7xy10-117
          unique: true
        carte:
          type: string
          $ref: "#/components/schemas/Carte"
      required:
        - id
        - echange_id
        - carte_id

    Echange:
      type: object
      properties:
        id:
          type: string
          description: L'identifiant unique de l'échange
          example: 7fe91a9a41bc839033eedf0f
        date:
          type: string
          description: date de l'échange
          format: data-time
          example: "2023-01-01T00:00:00Z"
          unique: true
        etat:
          type: string
          description: L'état de l'échange
          enum:
            - accepte
            - attente
            - refus
          example: attente
        dresseur_cree_id:
          type: string
          description: L'identifiant unique du dresseur qui crée l'échange
          unique: true
        dresseur:
          type: string
          description: "dresseur"
          $ref: "#/components/schemas/Dresseur"
        dresseur_concerne_id:
          type: string
          description: L'identifiant unique du dresseur concerné par l'échange
      required:
        - id
        - date
        - etat
        - dresseur_cree_id
        - dresseur_concerne_id
    EchangeData:
      type: object
      properties:
        date:
          type: string
          description: date de l'échange
          format: data-time
          example: "2023-01-01T00:00:00Z"
          unique: true
        etat:
          type: string
          description: L'état de l'échange
          enum:
            - accepte
            - attente
            - refus
          example: attente
        dresseur_cree_id:
          type: string
          description: L'identifiant unique du dresseur qui crée l'échange
          unique: true
        dresseur_concerne_id:
          type: string
          description: L'identifiant unique du dresseur concerné par l'échange
      required:
        - id
        - date
        - dresseur_cree_id
        - dresseur_concerne_id
    EchangeDataPartial:
      type: object
      properties:
        date:
          type: string
          description: date de l'échange
          format: data-time
          example: "2023-01-01T00:00:00Z"
          unique: true
        etat:
          type: string
          description: L'état de l'échange
          enum:
            - accepte
            - attente
            - refus
          example: attente
        dresseur_cree_id:
          type: string
          description: L'identifiant unique du dresseur qui crée l'échange
          unique: true
        dresseur_concerne_id:
          type: string
          description: L'identifiant unique du dresseur concerné par l'échange

    Message:
      type: object
      properties:
        date:
          type: string
          description: La date du message.
          format: data-time
          example: "2020-01-02T10:00:00.000Z"
        contenu:
          type: string
          description: Le contenu du message.
          example: Salut!
        dresseur_id:
          type: string
          description: L'id du dresseur.
          example: 7be91a9a41bc839033eedf0k
        echange_id:
          type: string
          description: Id de l'échange.
          example: "04657"
        createdAt:
          type: string
          description: Date de la créaction.
          format: data-time
          example: "2020-01-02T10:00:00.000Z"
        updatedAt:
          type: string
          description: Mise à jour de la date.
          format: data-time
          example: "2020-01-02T10:00:00.000Z"
      required:
        - date
        - contenu
        - dresseur_id
        - echange_id
        - createdAt
        - updatedAt
    MessageData:
      type: object
      properties:
        date:
          type: string
          description: La date du message.
          format: data-time
          example: "2020-01-02T10:00:00.000Z"
        contenu:
          type: string
          description: Le contenu du message.
          example: Salut!
        dresseur_id:
          type: string
          description: L'id du dresseur.
          example: 7be91a9a41bc839033eedf0k
      required:
        - date
        - contenu
        - dresseur_id
        - echange_id
        - createdAt
        - updatedAt

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
